/** @type {import('next').NextConfig} */
const nextConfig = {
  // Configuration pour la production
  output: 'standalone',
  typescript: {
    // Permettre le build même avec des erreurs TypeScript (temporaire pour production)
    ignoreBuildErrors: true,
  },
  
  // Optimisations de performance
  compress: true,
  poweredByHeader: false,
  generateEtags: true,
  
  // Optimisations d'images
  images: {
    domains: ['localhost', 'ipfs.io', 'gateway.ipfs.io'],
    formats: ['image/webp', 'image/avif'],
    minimumCacheTTL: 60,
  },
  
  // Variables d'environnement
  env: {
    NEXT_PUBLIC_CHAIN_ID: 'capsule-mainnet',
    NEXT_PUBLIC_RPC_ENDPOINT: process.env.NODE_ENV === 'development' ? 'http://localhost:3000/api/blockchain' : 'http://localhost:26657',
    NEXT_PUBLIC_REST_ENDPOINT: process.env.NODE_ENV === 'development' ? 'http://localhost:3000/api/blockchain' : 'http://localhost:26657',
    NEXT_PUBLIC_IPFS_GATEWAY: 'http://localhost:8080',
    NEXT_PUBLIC_IPFS_API: 'http://localhost:5001',
    NEXT_PUBLIC_DEVELOPMENT_MODE: 'true',
  },
  
  // Optimisations de transpilation
  transpilePackages: ['@cosmjs/amino', '@cosmjs/crypto', '@cosmjs/proto-signing', '@cosmjs/stargate'],
  
  // Optimisations expérimentales
  experimental: {
    optimizeCss: true,
    optimizePackageImports: ['@heroicons/react', 'framer-motion'],
  },

  // Headers de sécurité et cache optimisés
  async headers() {
    const isDevelopment = process.env.NODE_ENV === 'development';
    
    // CSP adaptatif selon l'environnement
    const cspHeader = isDevelopment
      ? `
        default-src 'self';
        script-src 'self' 'unsafe-eval' 'unsafe-inline' localhost:* chrome-extension:;
        style-src 'self' 'unsafe-inline' fonts.googleapis.com;
        font-src 'self' fonts.gstatic.com;
        img-src 'self' data: blob: ipfs.io *.ipfs.io gateway.ipfs.io;
        connect-src 'self' localhost:* ws://localhost:* wss://localhost:* chrome-extension: https://api.coingecko.com https://rpc-cosmos.keplr.app;
        media-src 'self';
        object-src 'none';
        base-uri 'self';
        form-action 'self';
        frame-ancestors 'none';
        upgrade-insecure-requests;
      `.replace(/\s{2,}/g, ' ').trim()
      : `
        default-src 'self';
        script-src 'self' 'unsafe-inline';
        style-src 'self' 'unsafe-inline' fonts.googleapis.com;
        font-src 'self' fonts.gstatic.com;
        img-src 'self' data: blob: ipfs.io *.ipfs.io gateway.ipfs.io;
        connect-src 'self' https://api.coingecko.com https://rpc-cosmos.keplr.app;
        media-src 'self';
        object-src 'none';
        base-uri 'self';
        form-action 'self';
        frame-ancestors 'none';
        upgrade-insecure-requests;
      `.replace(/\s{2,}/g, ' ').trim();

    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Content-Security-Policy',
            value: cspHeader,
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
          {
            key: 'Permissions-Policy',
            value: 'camera=(), microphone=(), geolocation=()',
          },
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains',
          },
        ],
      },
      {
        source: '/static/(.*)',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
      {
        source: '/_next/static/(.*)',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
    ]
  },

  // Configuration des rewrites pour éviter les erreurs CORS
  async rewrites() {
    return [
      {
        source: '/api/blockchain/:path*',
        destination: 'http://localhost:26657/:path*',
      },
    ]
  },
  webpack: (config, { isServer, webpack }) => {
    if (!isServer) {
      // Configuration pour les polyfills browser uniquement côté client
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        net: false,
        tls: false,
        crypto: require.resolve('crypto-browserify'),
        stream: require.resolve('stream-browserify'),
        path: require.resolve('path-browserify'),
        os: false,
        assert: false,
        constants: false,
        url: false,
        http: false,
        https: false,
        zlib: false,
        buffer: require.resolve('buffer'),
        process: require.resolve('process/browser'),
        util: require.resolve('util'),
        global: false,
      }

      // Ajouter les plugins pour les polyfills côté client uniquement
      config.plugins.push(
        new webpack.ProvidePlugin({
          Buffer: ['buffer', 'Buffer'],
          process: 'process/browser',
          global: 'global',
        }),
        new webpack.DefinePlugin({
          global: 'globalThis',
        })
      )
    }
    
    return config
  },
}

module.exports = nextConfig