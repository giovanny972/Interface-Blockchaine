'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import Link from 'next/link'
import { ArrowLeftIcon, DocumentTextIcon } from '@heroicons/react/24/outline'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'

// Contenu du whitepaper directement int√©gr√©
const whitepaperContent = `# Livre Blanc - Capsule Network
## R√©volutionner le Stockage de Donn√©es Temporelles avec la Blockchain

---

### Table des Mati√®res

1. [R√©sum√© Ex√©cutif](#r√©sum√©-ex√©cutif)
2. [Contexte et Probl√©matique](#contexte-et-probl√©matique)
3. [Vision et Mission](#vision-et-mission)
4. [Architecture Technique](#architecture-technique)
5. [Token TimeLoke (MTQ)](#token-timeloke-mtq)
6. [S√©curit√© et Cryptographie](#s√©curit√©-et-cryptographie)
7. [Types de Capsules](#types-de-capsules)
8. [√âcosyst√®me et Cas d'Usage](#√©cosyst√®me-et-cas-dusage)
9. [Gouvernance et Consensus](#gouvernance-et-consensus)
10. [Roadmap et D√©veloppement](#roadmap-et-d√©veloppement)
11. [√âconomie du Token](#√©conomie-du-token)
12. [Conclusion](#conclusion)

---

## R√©sum√© Ex√©cutif

**Capsule Network** est une blockchain r√©volutionnaire construite sur le framework Cosmos SDK qui introduit le concept de **capsules temporelles num√©riques**. Notre plateforme permet aux utilisateurs de stocker, chiffrer et programmer l'ouverture de donn√©es sensibles selon des conditions temporelles ou conditionnelles sp√©cifiques.

### Points Cl√©s :
- **Blockchain Cosmos** : Utilise Cosmos SDK et CometBFT pour une s√©curit√© et performance optimales
- **Token natif MTQ** : TimeLoke (MTQ) propulse l'√©cosyst√®me avec des m√©canismes de staking et de gouvernance
- **Chiffrement militaire** : AES-256-GCM avec Shamir Secret Sharing pour une s√©curit√© in√©gal√©e
- **Stockage hybride** : Blockchain pour les petits fichiers, IPFS pour les gros volumes
- **5 Types de capsules** : Solutions adapt√©es √† tous les besoins de stockage temporel
- **Interface moderne** : Application web Next.js avec int√©gration wallet native

### Proposition de Valeur Unique :
Capsule Network r√©sout le probl√®me fondamental du stockage de donn√©es sensibles avec d√©clenchement temporel en combinant la s√©curit√© de la blockchain, le chiffrement avanc√© et des m√©canismes d'ouverture programmable.

---

## Contexte et Probl√©matique

Dans l'√®re num√©rique, nous faisons face √† plusieurs d√©fis critiques li√©s au stockage s√©curis√© de donn√©es temporelles. Cette section explore les besoins non satisfaits et les limitations des solutions existantes.

---

## Architecture Technique

Capsule Network s'appuie sur une architecture blockchain moderne utilisant Cosmos SDK, avec des composants sp√©cialis√©s pour le chiffrement et le stockage temporel.

---

## Token TimeLoke MTQ

Le token MTQ est au c≈ìur de l'√©cosyst√®me Capsule Network, servant √† la fois de moyen de paiement, de m√©canisme de gouvernance et d'incitation √©conomique.

---

## S√©curit√© et Cryptographie

Notre approche de s√©curit√© combine des algorithmes de chiffrement de niveau militaire avec des m√©canismes de distribution de cl√©s innovants.

---

## Types de Capsules

Capsule Network propose 5 types de capsules pour r√©pondre √† tous les besoins :

1. **Coffre-Fort (SAFE)** üîê - Acc√®s imm√©diat pour le propri√©taire
2. **Verrouillage Temporel (TIME_LOCK)** ‚è∞ - Ouverture programm√©e dans le temps
3. **Conditionnel (CONDITIONAL)** üéØ - D√©clenchement bas√© sur des conditions externes
4. **Multi-Signatures (MULTI_SIG)** üë• - Approbation de plusieurs parties requise
5. **Dead Man's Switch (DEAD_MANS_SWITCH)** üíÄ - Ouverture automatique en cas d'inactivit√©

---

## Conclusion

Capsule Network repr√©sente l'avenir du stockage s√©curis√© d√©centralis√©, combinant innovation technologique et besoins r√©els du march√© pour cr√©er une solution unique et transformatrice.

---

*¬© 2025 Capsule Network. Tous droits r√©serv√©s.*`

export default function WhitepaperPage() {
  const content = whitepaperContent

  return (
    <div className="min-h-screen bg-gradient-to-br from-dark-900 via-dark-800 to-dark-900">
      <div className="container mx-auto px-6 py-12">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <Link
            href="/docs"
            className="inline-flex items-center text-primary-400 hover:text-primary-300 transition-colors duration-200 mb-6"
          >
            <ArrowLeftIcon className="w-4 h-4 mr-2" />
            Retour √† la documentation
          </Link>
          
          <div className="flex items-center mb-4">
            <div className="w-12 h-12 bg-primary-500/10 rounded-xl flex items-center justify-center mr-4">
              <DocumentTextIcon className="w-6 h-6 text-primary-400" />
            </div>
            <div>
              <h1 className="text-4xl font-bold text-white">
                Livre Blanc
                <span className="text-primary-400 ml-3">Capsule Network</span>
              </h1>
              <p className="text-dark-300 mt-2">
                R√©volutionner le Stockage de Donn√©es Temporelles avec la Blockchain
              </p>
            </div>
          </div>
        </motion.div>

        {/* Content */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="bg-white/5 backdrop-blur-sm border border-dark-600 rounded-3xl p-8 md:p-12"
        >
          <div className="prose prose-invert prose-lg max-w-none">
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              components={{
                h1: ({ children }) => {
                  const id = String(children).toLowerCase()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/^-+|-+$/g, '')
                  return (
                    <h1 id={id} className="text-4xl font-bold text-white mb-6 border-b border-dark-600 pb-4">
                      {children}
                    </h1>
                  )
                },
                h2: ({ children }) => {
                  const id = String(children).toLowerCase()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/^-+|-+$/g, '')
                  return (
                    <h2 id={id} className="text-3xl font-bold text-white mt-12 mb-6">
                      {children}
                    </h2>
                  )
                },
                h3: ({ children }) => {
                  const id = String(children).toLowerCase()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/^-+|-+$/g, '')
                  return (
                    <h3 id={id} className="text-2xl font-semibold text-primary-300 mt-8 mb-4">
                      {children}
                    </h3>
                  )
                },
                h4: ({ children }) => {
                  const id = String(children).toLowerCase()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/^-+|-+$/g, '')
                  return (
                    <h4 id={id} className="text-xl font-semibold text-white mt-6 mb-3">
                      {children}
                    </h4>
                  )
                },
                p: ({ children }) => (
                  <p className="text-dark-200 leading-relaxed mb-4">
                    {children}
                  </p>
                ),
                ul: ({ children }) => (
                  <ul className="text-dark-200 space-y-2 mb-6">
                    {children}
                  </ul>
                ),
                ol: ({ children }) => (
                  <ol className="text-dark-200 space-y-2 mb-6 list-decimal list-inside">
                    {children}
                  </ol>
                ),
                li: ({ children }) => (
                  <li className="flex items-start">
                    <span className="text-primary-400 mr-2">‚Ä¢</span>
                    <span>{children}</span>
                  </li>
                ),
                blockquote: ({ children }) => (
                  <blockquote className="border-l-4 border-primary-500 bg-dark-800/30 p-4 rounded-r-lg mb-6">
                    {children}
                  </blockquote>
                ),
                code: ({ inline, children }) => {
                  if (inline) {
                    return (
                      <code className="bg-dark-700 text-primary-300 px-2 py-1 rounded text-sm">
                        {children}
                      </code>
                    )
                  }
                  return (
                    <pre className="bg-dark-800 border border-dark-600 rounded-lg p-4 overflow-x-auto mb-6">
                      <code className="text-green-400 text-sm">
                        {children}
                      </code>
                    </pre>
                  )
                },
                table: ({ children }) => (
                  <div className="overflow-x-auto mb-6">
                    <table className="w-full border-collapse border border-dark-600">
                      {children}
                    </table>
                  </div>
                ),
                th: ({ children }) => (
                  <th className="border border-dark-600 bg-dark-800 px-4 py-2 text-left text-white font-semibold">
                    {children}
                  </th>
                ),
                td: ({ children }) => (
                  <td className="border border-dark-600 px-4 py-2 text-dark-200">
                    {children}
                  </td>
                ),
                a: ({ href, children }) => {
                  // Si c'est un lien vers une ancre dans la page
                  if (href?.startsWith('#')) {
                    return (
                      <a
                        href={href}
                        className="text-primary-400 hover:text-primary-300 underline transition-colors duration-200"
                        onClick={(e) => {
                          e.preventDefault()
                          const id = href.slice(1)
                          const element = document.getElementById(id)
                          if (element) {
                            element.scrollIntoView({ behavior: 'smooth', block: 'start' })
                          }
                        }}
                      >
                        {children}
                      </a>
                    )
                  }
                  return (
                    <a
                      href={href}
                      className="text-primary-400 hover:text-primary-300 underline transition-colors duration-200"
                      target={href?.startsWith('http') ? '_blank' : undefined}
                      rel={href?.startsWith('http') ? 'noopener noreferrer' : undefined}
                    >
                      {children}
                    </a>
                  )
                },
                strong: ({ children }) => (
                  <strong className="text-white font-semibold">
                    {children}
                  </strong>
                ),
                em: ({ children }) => (
                  <em className="text-primary-300 italic">
                    {children}
                  </em>
                ),
                hr: () => (
                  <hr className="border-dark-600 my-8" />
                )
              }}
            >
              {content || 'Erreur lors du chargement du contenu'}
            </ReactMarkdown>
          </div>
        </motion.div>

        {/* Navigation Footer */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="mt-12 text-center"
        >
          <Link
            href="/docs"
            className="inline-flex items-center px-6 py-3 bg-dark-800/50 border border-dark-600 text-white rounded-xl hover:border-primary-500/50 hover:bg-dark-700/50 transition-all duration-300"
          >
            <ArrowLeftIcon className="w-4 h-4 mr-2" />
            Retour √† la documentation
          </Link>
        </motion.div>
      </div>
    </div>
  )
}